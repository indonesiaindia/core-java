             GIT AND GITHUB NOTES
			 



1. Centralised version control system

✓ Correct
Feedback:

Subversion is a version control system 
based on the centralised version Control 
System. In Subversion, there is only one 
repository filesystem, and it is completely 
dependent on the availability of a 
single server. Hence, it falls into the 
category of centralised filesystem.




2.What are the disadvantages of Subversion?


Feedback:
In Subversion, there is only one repository 
filesystem, and it is completely dependent 
on the functionality of a single server. In 
Subversion, you cannot do any work on your 
project without a network connection; if 
anything happens to the central filesystem , you
may lose your data and the history of the 
changes. These are all the disadvantages 
of Subversion.




3.Git is faster than Mercurial for network
 operations such as downloading and 
 uploading project files to the file server. Git 
 is used very widely by developer’s all across 
 the globe and Git is more powerful than Mercurial 
 for all small/big projects.



4.Version control system helps developers 
to easily share the project code with 
their co-workers. Version control system 
can track collaborative changes to a project. It 
also allows developers to view all the past 
versions of the code and the difference between 
them. 




5. Git and Mercurial are both examples 
of distributed version control system 
because in Git and Mercurial, all developers
have their own local set of files, and changes 
between files are also saved locally on their 
machines.



6.  Distributed version control system takes 
a peer-to-peer approach to version control, which
 means that it synchronizes repositories by 
 transferring changes from 
 peer-to-peer. Here, all developers (i.e. peers) 
 have their own local set of files, and changes
 between files are also saved locally on their 
 machines.

But centralized systems use a 
client-server approach, which means that 
there is one repository filesystem, usually 
stored on a network server. Whenever you want 
to work on your project, you can connect the 
central collection of files through a network 
connection.




7. The git--version command will show the 
version of Git installed on your system.





8. Git is a distributed version control system
 and a tool to manage your project source code 
 history. Git will help you keep track of the 
 different versions of your project, but it 
 tracks those changes locally on your 
 computer; only you can see your project code 
 and all the changes and revisions made to your 
 project code.

GitHub, on the other hand, is a web-based, Git 
file hosting service that enables you to upload 
your project code, along with its changes and 
revisions, so you can showcase/share your 
projects and files with others.





9. A repository is a storage space where all 
your files, their revision history, and anything 
related to the project can be stored. This can be 
either local to your system or in some storage 
space on an online host.





10.  Files in GitHub can be in any of the 
following three states:

Modified: In this state, modifications are 
made to a file or files, and the changes are 
still on our local system.

Staged: In this stage, the changed files are 
added to the the staging area, which means the 
files will now become a part of your development 
history.

Committed: In this stage, we make a record or take 
a snapshot of the files we have added to the 
staging area or our development history.




11.   After staging your files, you can take
 a snapshot of your changes, and git will 
 remember the changes. This snapshot is known
 as a commit. Commit is essentially a record 
 of your progress in the project in the form 
 of snapshots. Once you are done with the 
 project, you can go back and have a look at 
 these snapshots to revisit your progress during 
 the project. 






12.  In the first stage, the files are 
modified. After that, the files are 
added to the staging area where they can 
be reviewed. Finally, once you have 
reviewed the changes in the staged files, you 
can create a record of your changes and Git 
will remember them. This is known as making 
a commit. This commit will now become a 
permanent part of your development history 
and will be tracked by Git. 





13.   Each commit is identified in Git by 
a unique ID, also known as SHA. Every time a 
commit is made in Git, that commit is assigned 
a unique ID or SHA. Using this unique ID, one 
commit can be distinguished from other commits.






14.   The -m lets you add a message to the 
commit which will be made/saved. The commit 
message can also be used to remind you of the 
changes you had made with a specific 
commit. Also, it is important to write good 
commit messages when you are working in 
a team, as commit messages would help other 
members of your team in understanding what 
files you have created or what changes you 
have made to them.




15.  The git commit only takes a snapshot of 
our changes, and the changes remain on our 
local machines. Further, the changes are not 
pushed onto our remote repositories on GitHub 
at the time.





16.  The ‘git remote add origin url ’ will only 
link our local repository to the remote 
repository on GitHub for the very 
first time. However, ‘git push’ will push 
all our changes from our local repository 
to the remote repository on GitHub.

